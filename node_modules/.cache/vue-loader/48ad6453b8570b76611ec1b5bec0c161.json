{"remainingRequest":"/myproject/git/code/web-admin-yxbaobei/node_modules/vue-loader/lib/index.js??vue-loader-options!/myproject/git/code/web-admin-yxbaobei/src/views/permission/page.vue?vue&type=script&lang=js&","dependencies":[{"path":"/myproject/git/code/web-admin-yxbaobei/src/views/permission/page.vue","mtime":1576046635812},{"path":"/myproject/git/code/web-admin-yxbaobei/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/myproject/git/code/web-admin-yxbaobei/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/myproject/git/code/web-admin-yxbaobei/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/myproject/git/code/web-admin-yxbaobei/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getRoutesTree} from '../../utils/permission'\n\nexport default {\n  name: 'PagePermission',\n  data() {\n    return {\n      dialogVisible: false,\n      dialogType: 'append',\n      page: {name:''},\n      data: [],\n      pageList: []\n    }\n  },\n  created() {\n    this.getPageList()\n  },\n  methods: {\n    // 角色切换\n    handleRolesChange() {\n      // this.$router.push({ path: '/permission/page?' + +new Date() })\n    },\n    Plist(menuList) {\n      let data\n      menuList.forEach(function(item, key) {\n        let menu\n        menu = {id: item.id, label: item.name, children:[]}\n        if (item.children.length) {\n          menu['children'] = this.Plist(item.children)\n        }\n        data.push(menu)\n      })\n      return data\n    },\n    getPageList(roles) {\n      // const _this = this\n      this.pageList = getRoutesTree()\n      console.log(this.pageList, 'roles')\n    },\n    append(data) {\n      var _this = this\n      _this.dialogVisible = !_this.dialogVisible\n      return\n      let id = 91\n      const newChild = { id: id++, label: 'testtest', children: [] }\n      if (!data.children) {\n        this.$set(data, 'children', [])\n      }\n      data.children.push(newChild)\n    },\n\n    remove(node, data) {\n      const parent = node.parent;\n      const children = parent.data.children || parent.data\n      const index = children.findIndex(d => d.id === data.id)\n      children.splice(index, 1)\n    },\n\n    renderContent(h, { node, data, store }) {\n      return (\n              <span class=\"custom-tree-node\">\n              <span>{node.label}</span>\n              <span>\n              <el-button size=\"mini\" type=\"text\" on-click={ () => this.append(data) }>Append</el-button>\n      <el-button size=\"mini\" type=\"text\" on-click={ () => this.remove(node, data) }>Delete</el-button>\n      </span>\n      </span>)\n    }\n  }\n}\n",null]}