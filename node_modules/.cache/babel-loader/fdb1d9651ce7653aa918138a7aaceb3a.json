{"remainingRequest":"/myproject/git/code/web-admin-yxbaobei/node_modules/babel-loader/lib/index.js!/myproject/git/code/web-admin-yxbaobei/node_modules/eslint-loader/index.js??ref--13-0!/myproject/git/code/web-admin-yxbaobei/src/store/modules/permission.js","dependencies":[{"path":"/myproject/git/code/web-admin-yxbaobei/src/store/modules/permission.js","mtime":1576244478414},{"path":"/myproject/git/code/web-admin-yxbaobei/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/myproject/git/code/web-admin-yxbaobei/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/myproject/git/code/web-admin-yxbaobei/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/myproject/git/code/web-admin-yxbaobei/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterAsyncRoutes = filterAsyncRoutes;\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"/myproject/git/code/web-admin-yxbaobei/node_modules/@babel/runtime-corejs2/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _router = require(\"@/router\");\n\nfunction hasPermission(menuList, menu_id) {\n  if (menuList.indexOf(menu_id) >= 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction filterAsyncRoutes(routes, menuList) {\n  var res = [];\n  routes.forEach(function (route) {\n    var tmp = (0, _objectSpread2.default)({}, route);\n\n    if (tmp.id && hasPermission(menuList, tmp.id)) {\n      if (tmp.children) {\n        tmp.children = filterAsyncRoutes(tmp.children, menuList);\n      }\n\n      res.push(tmp);\n    }\n  });\n  return res;\n}\n\nvar state = {\n  routes: [],\n  addRoutes: [],\n  routesTree: []\n};\nvar mutations = {\n  SET_ROUTES: function SET_ROUTES(state, routes) {\n    state.addRoutes = routes;\n    state.routes = _router.constantRoutes.concat(routes);\n  }\n};\nvar actions = {\n  generateRoutes: function generateRoutes(_ref, menuList) {\n    var commit = _ref.commit;\n    return new Promise(function (resolve) {\n      var accessedRoutes;\n\n      if (menuList.length) {\n        accessedRoutes = filterAsyncRoutes(_router.asyncRoutes, menuList);\n      }\n\n      commit('SET_ROUTES', accessedRoutes);\n      resolve(accessedRoutes);\n    });\n  } // generateRoutes({ commit }, roles) {\n  //   return new Promise(resolve => {\n  //     let accessedRoutes\n  //     if (roles.includes('admin')) {\n  //       accessedRoutes = asyncRoutes || []\n  //     } else {\n  //       accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)\n  //     }\n  //     commit('SET_ROUTES', accessedRoutes)\n  //     resolve(accessedRoutes)\n  //   })\n  // }\n\n};\nvar _default = {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};\nexports.default = _default;",null]}